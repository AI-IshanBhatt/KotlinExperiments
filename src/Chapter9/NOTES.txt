If you declare  List<Any> then,
Base Class is List, Type class is Int

Reified type parameters allow you to refer at runtime to the specific types used as
type arguments in an inline function call.
(For normal classes or functions, this isn’t possible, because type arguments are erased at runtime.)

Declaration-site variance lets you specify whether a generic type with a type argument
is a subtype or a supertype of another generic type with the same base type and a different type argument.
For example, it regulates whether it’s possible to pass arguments of type List<Int> to functions expecting List<Any>.
Here type arguments ar Int, Any , Base Type is List

Use-site variance = Java Wild-Cards

TYPE in CLASS
See the example of
class CountingSet<T> in ByExample.kn in Chapter 4

Or You can do
interface List<T> {
    operator fun get(index: Int) : T
}
Type parameter constraints let you restrict the types that can be used as type arguments for a class or function.

fun <T: Comparable<T>> -> Any T which implements Comparable<T> interface

WANTING TO DEFINE SOMETHING ON ALL NYMBERS ? iT IS difficult.
https://discuss.kotlinlang.org/t/how-to-write-generic-functions-for-all-numeric-types/7367/9
https://stackoverflow.com/questions/46803331/sharing-implementations-of-extension-functions-between-float-and-double-in-kotli

A LOT OF SO LINKS WILL BE CHECKED IN THIS GENERIC CHAPTER
-----------------------------------------------------------------------------------------------
Kotlin generics are erased at runtime, which means if you have an instance of a generic class,
you can’t find out the type arguments used when the instance was created.

When you call a generic function, in its body you can’t determine the type arguments it was invoked with
fun <T> isA(value: Any) = value is T
Error: Cannot check for instance of erased type: T

refy - Make something more concrete or real

WHAT YOU CAN DO WITH REFIED TYPES-
In type checks and casts (is, !is, as, as?)
To use the Kotlin reflection APIs, as we’ll discuss in chapter 10 (::class)
To get the corresponding java.lang.Class (::class.java)
As a type argument to call other functions.

WHAT YOU CAN NOT DO WITH REFIED TYPES-
Create new instances of the class specified as a type parameter
Call methods on the companion object of the type parameter class
Use a non-reified type parameter as a type argument when calling a function with a reified type parameter
Mark type parameters of classes, properties, or non-inline functions as reified